#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ctrlaccess:server');
var http = require('http');
var fs = require('fs'); //required for file serving
//var https = require('https');
/**
 * Get port from environment and store in Express.
 */
const host = 'localhost';

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
 var server = http.createServer(app);

// var server = https.createServer({
//     key: fs.readFileSync('./bin/ssl/my_cert.key'),
//     cert: fs.readFileSync('./bin/ssl/my_cert.crt'),
//     ca: fs.readFileSync ( './bin/ssl/my_cert.csr' )
// }, app)


// http.createServer(app).listen(80);
// app.use(function(req, res, next) {
//     if (req.secure) {
//         next();
//     } else {
//         res.redirect('https://' + req.headers.host + req.url);
//     }
// });
/**
 * Listen on provided port, on all network interfaces.
 */
const io = require('socket.io')(server);
//trying to serve the image file from the server
const video = io.of ( '/video' );
video.on('connection', function(socket){
  console.log("client:"+ socket.id);
  setInterval(() => {
     fs.readFile(__dirname + '/../public/video/video.jpg', function(err, buf){

     video.emit('new_image', { image: true, buffer: buf.toString('base64')}); //imprimiendo el id del cliente conectado 
     console.log('image file is initialized');
  })

},100)
  
  //);

// socket.on('image', function(socket){
//    console.log(socket);
//   fs.readFile(__dirname + '/../public/video/cam1.jpg', function(err, buf){
//     video.emit('new_image', { image: true, buffer: buf.toString('base64')});
//     video.disconte
//   });
//});

 });






//server.listen(host ,port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
